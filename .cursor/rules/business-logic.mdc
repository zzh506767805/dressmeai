---
description: 
globs: 
alwaysApply: false
---
# 业务逻辑规范

## 虚拟试衣业务流程

### 用户操作流程
1. **首页访问** → [index.tsx](mdc:pages/index.tsx)
2. **上传模特图片** → 图片预处理和验证
3. **上传服装图片** → 图片预处理和验证  
4. **AI试衣处理** → 调用阿里云API
5. **结果展示** → 保存到历史记录
6. **支付升级** → Stripe支付流程

### 核心业务规则

#### 图片上传限制
```typescript
/**
 * 图片上传业务规则
 * 确保用户上传符合AI处理要求的图片
 */
interface ImageValidationRules {
  maxSize: 5; // MB
  allowedFormats: ['image/jpeg', 'image/png'];
  minWidth: 300; // 像素
  minHeight: 400; // 像素
  maxWidth: 2048; // 像素  
  maxHeight: 2048; // 像素
}

// 模特图片特殊要求
interface PersonImageRules extends ImageValidationRules {
  requirements: [
    '清晰的全身照',
    '正面或侧面姿势',
    '背景简单纯色',
    '光线充足清晰'
  ];
}

// 服装图片特殊要求  
interface ClothImageRules extends ImageValidationRules {
  requirements: [
    '服装正面展示',
    '白色或透明背景',
    '服装轮廓清晰',
    '无模特穿着'
  ];
}
```

#### 用户权限管理
```typescript
/**
 * 用户使用权限控制
 * 免费用户和付费用户的功能差异
 */
interface UserPermissions {
  freeUser: {
    dailyLimit: 3; // 每日免费试衣次数
    historyLimit: 10; // 历史记录保存数量
    features: ['basic-try-on', 'low-resolution'];
  };
  
  premiumUser: {
    dailyLimit: -1; // 无限制
    historyLimit: -1; // 无限制
    features: ['basic-try-on', 'high-resolution', 'batch-processing', 'advanced-editing'];
  };
}

// 权限检查函数
function checkUserPermission(userId: string, action: string): boolean {
  const user = getUserInfo(userId);
  const permissions = user.isPremium ? UserPermissions.premiumUser : UserPermissions.freeUser;
  
  switch(action) {
    case 'try-on':
      return checkDailyLimit(userId, permissions.dailyLimit);
    case 'save-history':
      return checkHistoryLimit(userId, permissions.historyLimit);
    default:
      return permissions.features.includes(action);
  }
}
```

## 支付业务逻辑

### Stripe支付集成
```typescript
/**
 * 支付业务处理流程
 * 包含订阅管理、支付状态跟踪
 */
interface SubscriptionPlan {
  id: string;
  name: string;
  price: number; // 美分
  interval: 'month' | 'year';
  features: string[];
}

const SUBSCRIPTION_PLANS: SubscriptionPlan[] = [
  {
    id: 'premium_monthly',
    name: '高级月度订阅',
    price: 999, // $9.99
    interval: 'month',
    features: ['unlimited-try-on', 'high-resolution', 'batch-processing']
  },
  {
    id: 'premium_yearly', 
    name: '高级年度订阅',
    price: 9999, // $99.99 (节省$20)
    interval: 'year',
    features: ['unlimited-try-on', 'high-resolution', 'batch-processing', 'priority-support']
  }
];

// 创建支付会话
async function createCheckoutSession(planId: string, userId: string) {
  const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);
  if (!plan) throw new Error('无效的订阅计划');
  
  const session = await stripe.checkout.sessions.create({
    customer_email: getUserEmail(userId),
    line_items: [{
      price_data: {
        currency: 'usd',
        product_data: { name: plan.name },
        unit_amount: plan.price,
        recurring: { interval: plan.interval }
      },
      quantity: 1,
    }],
    mode: 'subscription',
    success_url: `${process.env.DOMAIN}/success?session_id={CHECKOUT_SESSION_ID}`,
    cancel_url: `${process.env.DOMAIN}/cancel`,
  });
  
  return session.url;
}
```

### 支付状态处理
```typescript
/**
 * 支付状态变更处理
 * Webhook处理订阅状态更新
 */
async function handlePaymentWebhook(event: Stripe.Event) {
  switch (event.type) {
    case 'checkout.session.completed':
      // 支付成功，激活用户订阅
      await activateSubscription(event.data.object);
      break;
      
    case 'invoice.payment_failed':
      // 支付失败，通知用户
      await handlePaymentFailure(event.data.object);
      break;
      
    case 'customer.subscription.deleted':
      // 订阅取消，降级用户权限
      await deactivateSubscription(event.data.object);
      break;
  }
}
```

## 历史记录管理

### 数据存储策略
```typescript
/**
 * 试衣历史记录数据结构
 * 包含用户操作历史和结果存储
 */
interface TryOnHistory {
  id: string;
  userId: string;
  personImageUrl: string;
  clothImageUrl: string;
  resultImageUrl: string;
  createdAt: Date;
  metadata: {
    processingTime: number; // 毫秒
    aiModel: string; // AI模型版本
    quality: 'low' | 'high'; // 图片质量
  };
}

// 历史记录保存
async function saveTryOnHistory(data: Omit<TryOnHistory, 'id' | 'createdAt'>) {
  // 检查用户存储限制
  const userPermission = await getUserPermission(data.userId);
  const historyCount = await getHistoryCount(data.userId);
  
  if (userPermission.historyLimit !== -1 && historyCount >= userPermission.historyLimit) {
    // 删除最旧的记录
    await deleteOldestHistory(data.userId);
  }
  
  // 保存新记录
  const history: TryOnHistory = {
    ...data,
    id: generateId(),
    createdAt: new Date()
  };
  
  await saveToDatabase(history);
  return history;
}
```

### 历史记录清理
```typescript
/**
 * 定期清理过期数据
 * 优化存储空间和性能
 */
async function cleanupExpiredHistory() {
  const expiryDate = new Date();
  expiryDate.setMonth(expiryDate.getMonth() - 6); // 6个月过期
  
  // 删除过期的免费用户记录
  await deleteHistoryBefore(expiryDate, 'free');
  
  // 清理临时文件
  await cleanupTempFiles();
  
  console.log('历史记录清理完毕');
}
```

## SEO和营销优化

### 页面SEO策略
```typescript
/**
 * 动态SEO元数据生成
 * 根据页面内容生成优化的SEO标签
 */
interface SEOMetadata {
  title: string;
  description: string;
  keywords: string[];
  openGraph: {
    title: string;
    description: string;
    image: string;
    url: string;
  };
  structuredData: any; // JSON-LD格式
}

// 首页SEO配置
const homePageSEO: SEOMetadata = {
  title: 'DressMeAI - AI虚拟试衣平台 | 智能换装体验',
  description: '使用AI技术进行虚拟试衣，上传照片即可看到服装穿着效果。支持多种服装类型，快速生成高质量试衣图片。',
  keywords: ['AI试衣', '虚拟试衣', '智能换装', 'AI时尚', '在线试衣'],
  openGraph: {
    title: 'DressMeAI - 革命性的AI虚拟试衣体验',
    description: '无需试穿，AI帮你预览服装效果。节省时间，提升购物体验。',
    image: '/og-image-home.jpg',
    url: 'https://dressmeai.com'
  },
  structuredData: {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": "DressMeAI",
    "description": "AI虚拟试衣平台",
    "url": "https://dressmeai.com"
  }
};
```

### 用户行为分析
```typescript
/**
 * 关键业务指标跟踪
 * 监控用户转化和产品表现
 */
interface AnalyticsEvent {
  event: string;
  userId?: string;
  sessionId: string;
  timestamp: Date;
  properties: Record<string, any>;
}

// 关键事件跟踪
const TRACKED_EVENTS = {
  UPLOAD_PERSON_IMAGE: 'upload_person_image',
  UPLOAD_CLOTH_IMAGE: 'upload_cloth_image', 
  START_PROCESSING: 'start_ai_processing',
  PROCESSING_COMPLETE: 'processing_complete',
  VIEW_RESULT: 'view_result',
  SAVE_RESULT: 'save_result',
  SHARE_RESULT: 'share_result',
  UPGRADE_CLICKED: 'upgrade_clicked',
  PAYMENT_COMPLETED: 'payment_completed'
};

// 发送分析数据
function trackEvent(event: string, properties: Record<string, any> = {}) {
  const analyticsData: AnalyticsEvent = {
    event,
    userId: getCurrentUserId(),
    sessionId: getSessionId(),
    timestamp: new Date(),
    properties: {
      ...properties,
      page: window.location.pathname,
      userAgent: navigator.userAgent
    }
  };
  
  // 发送到分析平台（Google Analytics, Mixpanel等）
  sendAnalytics(analyticsData);
}
```

## 错误监控和日志

### 业务错误分类
```typescript
/**
 * 业务错误类型定义
 * 便于问题排查和用户支持
 */
enum BusinessErrorType {
  IMAGE_UPLOAD_FAILED = 'IMAGE_UPLOAD_FAILED',
  AI_PROCESSING_FAILED = 'AI_PROCESSING_FAILED', 
  PAYMENT_FAILED = 'PAYMENT_FAILED',
  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',
  INVALID_SUBSCRIPTION = 'INVALID_SUBSCRIPTION'
}

class BusinessError extends Error {
  constructor(
    public type: BusinessErrorType,
    public userMessage: string,
    public technicalDetails?: any
  ) {
    super(userMessage);
    this.name = 'BusinessError';
  }
}

// 错误处理和用户通知
function handleBusinessError(error: BusinessError) {
  // 记录技术日志
  console.error('业务错误:', {
    type: error.type,
    message: error.message,
    details: error.technicalDetails,
    timestamp: new Date(),
    userId: getCurrentUserId()
  });
  
  // 显示用户友好的错误信息
  showUserNotification(error.userMessage, 'error');
  
  // 必要时发送错误报告
  if (shouldReportError(error.type)) {
    sendErrorReport(error);
  }
}
```

