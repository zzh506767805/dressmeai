---
description: 
globs: 
alwaysApply: false
---
# AI开发指南

## AI服务集成规范

### 阿里云AI虚拟试衣API
- API文档：使用阿里云视觉AI服务
- 请求格式：支持图片base64和URL两种方式
- 响应处理：包含错误处理和重试机制
- 费用控制：合理使用API避免过度消费

### API调用示例
```typescript
/**
 * 调用阿里云AI试衣API
 * @param personImage 模特图片（base64或URL）
 * @param clothImage 服装图片（base64或URL）
 * @returns 试衣结果图片URL
 */
async function callAliAI(personImage: string, clothImage: string) {
  try {
    // 构建请求参数
    const params = {
      person_image: personImage,
      cloth_image: clothImage,
      // 其他必要参数
    };
    
    // 发送API请求
    const response = await fetch('/api/ai-try-on', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(params),
    });
    
    // 处理响应
    if (!response.ok) {
      throw new Error(`API调用失败: ${response.statusText}`);
    }
    
    const result = await response.json();
    return result.output_image_url;
    
  } catch (error) {
    console.error('AI试衣API错误:', error);
    throw error;
  }
}
```

## 图片处理规范

### 图片上传前处理
```typescript
/**
 * 图片上传前的预处理
 * - 压缩图片大小（最大5MB）
 * - 转换为支持的格式（JPG/PNG）
 * - 验证图片尺寸和质量
 */
function preprocessImage(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const img = new Image();
      img.onload = () => {
        // 创建canvas进行图片处理
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // 计算合适的尺寸（保持宽高比）
        const maxWidth = 1024;
        const maxHeight = 1024;
        let { width, height } = img;
        
        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height;
            height = maxHeight;
          }
        }
        
        // 设置canvas尺寸并绘制
        canvas.width = width;
        canvas.height = height;
        ctx?.drawImage(img, 0, 0, width, height);
        
        // 转换为base64
        const base64 = canvas.toDataURL('image/jpeg', 0.8);
        resolve(base64);
      };
      img.src = e.target?.result as string;
    };
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
}
```

### 图片存储管理
- 使用Cloudinary进行图片存储和优化
- 自动生成不同尺寸的缩略图
- 图片CDN加速
- 过期清理机制

## 错误处理规范

### AI服务错误处理
```typescript
/**
 * AI服务统一错误处理
 * 包含常见错误类型和用户友好的提示信息
 */
class AIServiceError extends Error {
  constructor(
    message: string,
    public code: string,
    public userMessage: string
  ) {
    super(message);
    this.name = 'AIServiceError';
  }
}

// 错误处理映射
const errorMapping = {
  'QUOTA_EXCEEDED': '今日试衣次数已用完，请明天再试',
  'INVALID_IMAGE': '图片格式不正确，请上传清晰的JPG或PNG图片',
  'NETWORK_ERROR': '网络连接异常，请稍后重试',
  'SERVICE_UNAVAILABLE': '服务暂时不可用，我们正在紧急修复'
};

function handleAIError(error: any): never {
  const userMessage = errorMapping[error.code] || '处理失败，请稍后重试';
  throw new AIServiceError(error.message, error.code, userMessage);
}
```

## 性能优化策略

### 请求优化
- 图片预处理减少传输大小
- 请求去重（防止重复提交）
- 进度提示和加载状态
- 超时处理和重试机制

### 缓存策略
```typescript
/**
 * AI结果缓存策略
 * 相同的图片组合缓存结果，避免重复计算
 */
const aiResultCache = new Map<string, string>();

function getCacheKey(personImage: string, clothImage: string): string {
  // 生成基于图片内容的唯一标识
  return `${hashImage(personImage)}_${hashImage(clothImage)}`;
}

async function tryOnWithCache(personImage: string, clothImage: string) {
  const cacheKey = getCacheKey(personImage, clothImage);
  
  // 检查缓存
  if (aiResultCache.has(cacheKey)) {
    return aiResultCache.get(cacheKey);
  }
  
  // 调用AI服务
  const result = await callAliAI(personImage, clothImage);
  
  // 存储缓存
  aiResultCache.set(cacheKey, result);
  
  return result;
}
```

## 用户体验优化

### 加载状态管理
```typescript
/**
 * AI处理过程的用户体验优化
 * 包含进度提示、预计时间、可取消操作
 */
function AIProcessingIndicator() {
  const [progress, setProgress] = useState(0);
  const [stage, setStage] = useState('uploading'); // uploading, processing, generating
  
  const stageMessages = {
    uploading: '正在上传图片...',
    processing: 'AI正在分析图片...',
    generating: '正在生成试衣效果...'
  };
  
  return (
    <div className="ai-processing">
      <div className="progress-bar">
        <div 
          className="progress-fill" 
          style={{ width: `${progress}%` }}
        />
      </div>
      <p>{stageMessages[stage]}</p>
      <small>预计需要10-30秒，请耐心等待</small>
    </div>
  );
}
```

### 结果展示优化
- 对比展示（原图 vs 试衣效果）
- 支持放大查看细节
- 一键保存和分享
- 历史记录管理

## 数据统计和监控

### 使用数据收集
- API调用成功率
- 平均处理时间
- 用户满意度反馈
- 错误类型统计

### 性能监控
- 页面加载时间
- API响应时间
- 图片处理耗时
- 用户转化率

