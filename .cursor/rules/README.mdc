---
description: 
globs: 
alwaysApply: false
---
# DressMeAI Cursor Rules 使用指南

## 📋 规则概览

我为您的DressMeAI项目创建了一套完整的Cursor Rules，帮助您更高效地开发和维护这个AI虚拟试衣平台。

### 📁 规则文件说明

| 文件名 | 用途 | 主要内容 |
|-------|------|----------|
| [project-overview.mdc](mdc:.cursor/rules/project-overview.mdc) | 项目总览 | 项目结构、技术架构、核心功能介绍 |
| [coding-standards.mdc](mdc:.cursor/rules/coding-standards.mdc) | 编码规范 | 代码风格、注释标准、组件规范 |
| [ai-development.mdc](mdc:.cursor/rules/ai-development.mdc) | AI开发指南 | 阿里云AI集成、图片处理、错误处理 |
| [business-logic.mdc](mdc:.cursor/rules/business-logic.mdc) | 业务逻辑 | 用户权限、支付流程、SEO优化 |
| [deployment-ops.mdc](mdc:.cursor/rules/deployment-ops.mdc) | 部署运营 | 环境配置、监控日志、安全设置 |

## 🚀 快速开始

### 1. 开发环境设置
```bash
# 安装依赖
npm install

# 配置环境变量（参考 deployment-ops.mdc）
cp .env.example .env.local

# 启动开发服务器
npm run dev
```

### 2. 主要开发流程

#### 新增功能开发
1. 查看 [project-overview.mdc](mdc:.cursor/rules/project-overview.mdc) 了解项目结构
2. 遵循 [coding-standards.mdc](mdc:.cursor/rules/coding-standards.mdc) 的编码规范
3. 如涉及AI功能，参考 [ai-development.mdc](mdc:.cursor/rules/ai-development.mdc)
4. 业务逻辑实现参考 [business-logic.mdc](mdc:.cursor/rules/business-logic.mdc)

#### 部署和运维
1. 参考 [deployment-ops.mdc](mdc:.cursor/rules/deployment-ops.mdc) 进行部署配置
2. 设置监控和日志系统
3. 配置安全策略和备份机制

## 💡 使用建议

### 对于产品经理（您）
- 重点关注 [business-logic.mdc](mdc:.cursor/rules/business-logic.mdc) 了解业务流程
- 查看 [project-overview.mdc](mdc:.cursor/rules/project-overview.mdc) 理解技术架构
- 使用 [deployment-ops.mdc](mdc:.cursor/rules/deployment-ops.mdc) 中的管理员面板监控系统

### 对于开发者
- 开发前必读 [coding-standards.mdc](mdc:.cursor/rules/coding-standards.mdc)
- AI功能开发时参考 [ai-development.mdc](mdc:.cursor/rules/ai-development.mdc)
- 部署时遵循 [deployment-ops.mdc](mdc:.cursor/rules/deployment-ops.mdc) 的安全配置

## 🎯 关键功能实现指南

### AI虚拟试衣功能
```typescript
// 参考 ai-development.mdc 中的示例
import { callAliAI, preprocessImage } from '../utils/ai-service';

async function performVirtualTryOn(personImage: File, clothImage: File) {
  // 1. 图片预处理
  const processedPersonImage = await preprocessImage(personImage);
  const processedClothImage = await preprocessImage(clothImage);
  
  // 2. 调用AI服务
  const result = await callAliAI(processedPersonImage, processedClothImage);
  
  // 3. 保存历史记录
  await saveTryOnHistory({
    userId: getCurrentUserId(),
    personImageUrl: processedPersonImage,
    clothImageUrl: processedClothImage, 
    resultImageUrl: result
  });
  
  return result;
}
```

### 用户权限控制
```typescript
// 参考 business-logic.mdc 中的权限管理
function checkUserPermission(userId: string, action: string): boolean {
  const user = getUserInfo(userId);
  const permissions = user.isPremium ? premiumUserPermissions : freeUserPermissions;
  
  // 检查特定操作权限
  return permissions.features.includes(action);
}
```

### SEO优化实现
```typescript
// 参考 business-logic.mdc 中的SEO策略
export function generateSEOMetadata(page: string): SEOMetadata {
  const seoConfig = {
    'home': homePageSEO,
    'try-on': tryOnPageSEO,
    'history': historyPageSEO
  };
  
  return seoConfig[page] || defaultSEO;
}
```

## 📊 监控和分析

### 关键指标追踪
- **技术指标**: 页面加载时间、API响应时间、错误率
- **业务指标**: 转化率、用户留存、收入增长
- **AI指标**: 处理成功率、平均处理时间、用户满意度

### 日志和错误监控
```typescript
// 使用统一的日志系统（参考 deployment-ops.mdc）
const logger = Logger.getInstance();
logger.log(LogLevel.INFO, '用户开始试衣', { userId, imageCount: 2 });
```

## 🔧 常见问题解决

### 性能优化
1. 图片压缩和CDN加速
2. API请求缓存策略
3. 代码分割和懒加载

### 安全防护
1. 文件上传安全检查
2. API访问频率限制
3. 用户数据加密存储

### 错误处理
1. 友好的用户错误提示
2. 完整的错误日志记录
3. 自动错误恢复机制

## 📈 持续改进

### 定期review checklist
- [ ] 检查代码是否符合规范
- [ ] 验证SEO元数据是否完整
- [ ] 测试AI功能准确性
- [ ] 监控系统性能指标
- [ ] 备份数据完整性检查

### 版本更新流程
1. 功能开发和测试
2. 代码review和安全检查
3. 预发布环境验证
4. 生产环境部署
5. 监控和回滚准备

---

## 💬 需要帮助？

作为您的技术伙伴，我随时为您提供支持：

1. **代码问题**: 参考相应的规则文件或直接询问我
2. **业务逻辑**: 查看 business-logic.mdc 或讨论具体需求
3. **部署运维**: 遵循 deployment-ops.mdc 或寻求技术支持
4. **性能优化**: 基于监控数据进行针对性优化

记住，这些规则是为了帮助我们打造一个成功的产品。任何时候有疑问，都可以随时与我讨论！

