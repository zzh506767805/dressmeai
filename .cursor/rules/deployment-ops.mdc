---
description: 
globs: 
alwaysApply: false
---
# 部署和运营指南

## 开发环境配置

### 环境变量管理
```bash
# .env.local 文件配置
# 阿里云AI服务配置
ALIYUN_API_KEY=your_aliyun_api_key
ALIYUN_ENDPOINT=https://your-region.aliyuncs.com

# Cloudinary图片存储配置
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# Stripe支付配置
STRIPE_PUBLIC_KEY=pk_test_xxx
STRIPE_SECRET_KEY=sk_test_xxx
STRIPE_WEBHOOK_SECRET=whsec_xxx

# 数据库配置
DATABASE_URL=your_database_connection_string

# 域名配置
DOMAIN=https://dressmeai.com
```

### 本地开发启动
```bash
# 安装依赖
npm install

# 启动开发服务器
npm run dev

# 代码检查
npm run lint

# 构建生产版本
npm run build
```

## 生产环境部署

### Vercel部署配置
```json
// vercel.json
{
  "functions": {
    "pages/api/generate.ts": {
      "maxDuration": 30
    }
  },
  "env": {
    "ALIYUN_API_KEY": "@aliyun_api_key",
    "CLOUDINARY_CLOUD_NAME": "@cloudinary_cloud_name",
    "STRIPE_SECRET_KEY": "@stripe_secret_key"
  },
  "build": {
    "env": {
      "NEXT_PUBLIC_DOMAIN": "https://dressmeai.com"
    }
  }
}
```

### 部署检查清单
- [ ] 环境变量已配置
- [ ] 域名DNS已解析
- [ ] SSL证书已配置
- [ ] Webhook端点已设置
- [ ] 数据库连接已测试
- [ ] 图片存储已配置
- [ ] 支付系统已测试
- [ ] 错误监控已启用

## 性能监控

### 关键性能指标 (KPIs)
```typescript
/**
 * 性能监控指标定义
 * 追踪系统健康状态和用户体验
 */
interface PerformanceMetrics {
  // 页面性能
  pageLoadTime: number; // 页面加载时间
  firstContentfulPaint: number; // 首次内容绘制
  largestContentfulPaint: number; // 最大内容绘制
  
  // AI处理性能
  aiProcessingTime: number; // AI处理时间
  imageUploadTime: number; // 图片上传时间
  
  // 业务指标
  conversionRate: number; // 转化率
  dailyActiveUsers: number; // 日活跃用户
  averageSessionDuration: number; // 平均会话时长
  
  // 系统指标
  errorRate: number; // 错误率
  apiResponseTime: number; // API响应时间
  uptime: number; // 系统可用性
}

// 性能监控设置
function setupPerformanceMonitoring() {
  // 页面性能监控
  if (typeof window !== 'undefined') {
    new PerformanceObserver((list) => {
      list.getEntries().forEach((entry) => {
        if (entry.entryType === 'largest-contentful-paint') {
          // 记录LCP指标
          reportMetric('lcp', entry.startTime);
        }
      });
    }).observe({ entryTypes: ['largest-contentful-paint'] });
  }
  
  // API性能监控
  interceptApiCalls();
}
```

### 错误监控集成
```typescript
/**
 * 错误监控和报告系统
 * 集成Sentry或类似服务
 */
import * as Sentry from '@sentry/nextjs';

Sentry.init({
  dsn: process.env.SENTRY_DSN,
  environment: process.env.NODE_ENV,
  tracesSampleRate: 0.1,
  beforeSend(event) {
    // 过滤敏感信息
    if (event.user) {
      delete event.user.email;
    }
    return event;
  }
});

// 自定义错误报告
function reportError(error: Error, context?: any) {
  Sentry.withScope((scope) => {
    if (context) {
      scope.setContext('additional', context);
    }
    Sentry.captureException(error);
  });
}
```

## 安全配置

### 安全头配置
```javascript
// next.config.js
const securityHeaders = [
  {
    key: 'X-DNS-Prefetch-Control',
    value: 'on'
  },
  {
    key: 'Strict-Transport-Security',
    value: 'max-age=63072000; includeSubDomains; preload'
  },
  {
    key: 'X-XSS-Protection',
    value: '1; mode=block'
  },
  {
    key: 'X-Frame-Options',
    value: 'DENY'
  },
  {
    key: 'X-Content-Type-Options',
    value: 'nosniff'
  },
  {
    key: 'Referrer-Policy',
    value: 'origin-when-cross-origin'
  }
];

module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: securityHeaders,
      },
    ];
  },
};
```

### API安全中间件
```typescript
/**
 * API请求安全验证
 * 包含频率限制、身份验证等
 */
import rateLimit from 'express-rate-limit';

// 请求频率限制
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15分钟
  max: 100, // 最多100个请求
  message: '请求过于频繁，请稍后再试',
  standardHeaders: true,
  legacyHeaders: false,
});

// API密钥验证
function validateApiKey(req: any, res: any, next: any) {
  const apiKey = req.headers['x-api-key'];
  
  if (!apiKey || apiKey !== process.env.API_SECRET_KEY) {
    return res.status(401).json({ error: '无效的API密钥' });
  }
  
  next();
}

// 文件上传安全检查
function validateFileUpload(file: any) {
  // 检查文件类型
  const allowedTypes = ['image/jpeg', 'image/png'];
  if (!allowedTypes.includes(file.mimetype)) {
    throw new Error('不支持的文件类型');
  }
  
  // 检查文件大小
  const maxSize = 5 * 1024 * 1024; // 5MB
  if (file.size > maxSize) {
    throw new Error('文件过大');
  }
  
  // 检查文件头部（防止伪造）
  const fileHeader = file.buffer.slice(0, 4);
  const jpegHeader = Buffer.from([0xFF, 0xD8, 0xFF]);
  const pngHeader = Buffer.from([0x89, 0x50, 0x4E, 0x47]);
  
  if (!fileHeader.includes(jpegHeader) && !fileHeader.includes(pngHeader)) {
    throw new Error('文件格式验证失败');
  }
}
```

## 数据备份和恢复

### 数据备份策略
```typescript
/**
 * 数据备份和恢复机制
 * 确保数据安全和业务连续性
 */
interface BackupStrategy {
  // 数据库备份
  database: {
    frequency: 'daily'; // 每日备份
    retention: 30; // 保留30天
    location: 's3://backup-bucket/database/';
  };
  
  // 图片文件备份
  images: {
    frequency: 'realtime'; // 实时同步
    retention: 90; // 保留90天
    location: 's3://backup-bucket/images/';
  };
  
  // 配置文件备份
  config: {
    frequency: 'weekly'; // 每周备份
    retention: 12; // 保留12周
    location: 's3://backup-bucket/config/';
  };
}

// 自动备份脚本
async function performBackup() {
  try {
    // 备份数据库
    await backupDatabase();
    
    // 备份重要文件
    await backupFiles();
    
    // 清理过期备份
    await cleanupOldBackups();
    
    console.log('备份完成:', new Date());
  } catch (error) {
    console.error('备份失败:', error);
    // 发送警报通知
    await sendAlert('备份失败', error.message);
  }
}

// 恢复数据
async function restoreFromBackup(backupDate: string) {
  console.log(`开始恢复 ${backupDate} 的备份...`);
  
  // 停止服务
  await stopServices();
  
  try {
    // 恢复数据库
    await restoreDatabase(backupDate);
    
    // 恢复文件
    await restoreFiles(backupDate);
    
    // 验证数据完整性
    await validateDataIntegrity();
    
    console.log('数据恢复完成');
  } catch (error) {
    console.error('恢复失败:', error);
    throw error;
  } finally {
    // 重启服务
    await startServices();
  }
}
```

## 日志管理

### 日志配置
```typescript
/**
 * 统一日志管理系统
 * 便于问题排查和系统监控
 */
enum LogLevel {
  ERROR = 'error',
  WARN = 'warn', 
  INFO = 'info',
  DEBUG = 'debug'
}

interface LogEntry {
  timestamp: Date;
  level: LogLevel;
  message: string;
  context?: any;
  userId?: string;
  sessionId?: string;
  requestId?: string;
}

class Logger {
  private static instance: Logger;
  
  static getInstance(): Logger {
    if (!Logger.instance) {
      Logger.instance = new Logger();
    }
    return Logger.instance;
  }
  
  log(level: LogLevel, message: string, context?: any) {
    const entry: LogEntry = {
      timestamp: new Date(),
      level,
      message,
      context,
      userId: getCurrentUserId(),
      sessionId: getSessionId(),
      requestId: getRequestId()
    };
    
    // 输出到控制台
    console[level](mdc:JSON.stringify(entry));
    
    // 发送到日志服务
    this.sendToLogService(entry);
  }
  
  private async sendToLogService(entry: LogEntry) {
    // 发送到外部日志服务（如ELK、CloudWatch等）
    if (process.env.LOG_SERVICE_URL) {
      try {
        await fetch(process.env.LOG_SERVICE_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(entry)
        });
      } catch (error) {
        console.error('日志服务发送失败:', error);
      }
    }
  }
}

// 使用示例
const logger = Logger.getInstance();
logger.log(LogLevel.INFO, 'AI处理开始', { imageSize: '1024x768' });
logger.log(LogLevel.ERROR, 'API调用失败', { error: error.message });
```

## 运营工具

### 管理员面板
```typescript
/**
 * 管理员操作面板
 * 用于监控系统状态和管理用户
 */
interface AdminDashboard {
  // 系统状态
  systemStatus: {
    uptime: string;
    activeUsers: number;
    errorRate: number;
    apiResponseTime: number;
  };
  
  // 用户管理
  userManagement: {
    totalUsers: number;
    premiumUsers: number;
    newUsersToday: number;
    churnRate: number;
  };
  
  // 收入统计
  revenue: {
    monthlyRevenue: number;
    yearlyRevenue: number;
    averageRevenuePerUser: number;
    conversionRate: number;
  };
  
  // AI使用统计
  aiUsage: {
    dailyRequests: number;
    successRate: number;
    averageProcessingTime: number;
    costPerRequest: number;
  };
}

// 管理员权限验证
function requireAdminAuth(handler: any) {
  return async (req: any, res: any) => {
    const user = await getCurrentUser(req);
    
    if (!user || !user.isAdmin) {
      return res.status(403).json({ error: '需要管理员权限' });
    }
    
    return handler(req, res);
  };
}
```

### 自动化运维脚本
```bash
#!/bin/bash
# 自动化运维脚本集合

# 健康检查
check_health() {
  echo "检查系统健康状态..."
  
  # 检查服务状态
  curl -f http://localhost:3000/api/health || exit 1
  
  # 检查数据库连接
  npm run db:check || exit 1
  
  # 检查外部服务
  curl -f https://api.aliyun.com/health || echo "警告：阿里云服务异常"
  
  echo "健康检查完成"
}

# 性能优化
optimize_performance() {
  echo "执行性能优化..."
  
  # 清理临时文件
  rm -rf /tmp/dressmeai-*
  
  # 优化数据库
  npm run db:optimize
  
  # 清理日志文件（保留最近7天）
  find /var/log/dressmeai -name "*.log" -mtime +7 -delete
  
  echo "性能优化完成"
}

# 安全扫描
security_scan() {
  echo "执行安全扫描..."
  
  # 检查依赖漏洞
  npm audit --audit-level=high
  
  # 检查文件权限
  find . -type f -perm -002 -exec chmod 644 {} \;
  
  # 检查环境变量
  if [ -f .env.local ]; then
    echo "警告：检测到 .env.local 文件，请确保不包含在版本控制中"
  fi
  
  echo "安全扫描完成"
}

# 定时任务
setup_cron_jobs() {
  echo "设置定时任务..."
  
  # 每日健康检查
  echo "0 6 * * * /path/to/check_health.sh" | crontab -
  
  # 每周性能优化
  echo "0 2 * * 0 /path/to/optimize_performance.sh" | crontab -
  
  # 每日数据备份
  echo "0 3 * * * /path/to/backup.sh" | crontab -
  
  echo "定时任务设置完成"
}

